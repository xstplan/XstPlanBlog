{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/Img/20231016195905.png","path":"Img/20231016195905.png","modified":1,"renderable":0},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/prism/prism.js","path":"js/prism/prism.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/prism/prism.css","path":"js/prism/prism.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/about.md","hash":"4b5d17f7539b1b8e92dccb94155cbf0da56db9fa","modified":1697604511426},{"_id":"source/Img/20231016195905.png","hash":"eabb2e7a2b75a4f049dd4c9cb170655743f7312c","modified":1697457540950},{"_id":"source/_posts/1.计算机编程/SOLID原则.md","hash":"209dcb77c5af072d2063d497c18983d0f6670feb","modified":1697622076794},{"_id":"source/_posts/2.前端笔记/ES6的第一天.md","hash":"b6daf901d1c97c0b334f5fead9c48fa98c61034e","modified":1697611914729},{"_id":"source/_posts/1.计算机编程/运行时、运行库、运行环境.md","hash":"44fc35f79d16f85655ea14b9cd4c16cfcee5ef5b","modified":1697548571416},{"_id":"source/_posts/2.前端笔记/Node.js 、npm、cnpm、yran主要作用.md","hash":"212e12e9048d7ae9b13af023080767315f7e2272","modified":1697605109898},{"_id":"source/_posts/2.前端笔记/Node.js安装与配置环境(Windows版).md","hash":"164e02bd3a7986915d0654eb3a44831c2252b2fc","modified":1697604997450},{"_id":"themes/jacman/README.md","hash":"897309f4a728102054ebe916e4b907ebf41e03ae","modified":1697544862714},{"_id":"themes/jacman/.gitignore","hash":"0d5c2fdbdc974f10150baa12e1fc171a34960ed8","modified":1697544862713},{"_id":"themes/jacman/LICENSE","hash":"d8780b41bab4b87bdd21eca444cae11af72617f4","modified":1697544862714},{"_id":"themes/jacman/_config.yml","hash":"7995947601dc34d0b78c8c6d9059ddf7bf39e2f5","modified":1697603353100},{"_id":"themes/jacman/README_zh.md","hash":"17119a321a97dd84628ed8c16c0619ef5be94cbe","modified":1697544862715},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"0e7912c6505592a10efe2db1c994ccc3ebf91239","modified":1697544862716},{"_id":"themes/jacman/languages/default.yml","hash":"966be0b585cd3e3b7f0e485c896c24dfdfee423a","modified":1697544862715},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"6e1460594fa50394ac6f11fe9d39dc59478ddd0c","modified":1697544862715},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1697544862725},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1697544862725},{"_id":"themes/jacman/layout/index.ejs","hash":"b832b280ec0a2b741e73a2300f219f0075c99278","modified":1697544862726},{"_id":"themes/jacman/layout/layout.ejs","hash":"ceeb2a7410b96b81310ed9b1279f62e953b0a6ca","modified":1697544862726},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1697544862726},{"_id":"themes/jacman/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1697544862727},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1697544862726},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1697544862727},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"00c00b4a961ac1f7bc8ee688ce134fe0c454edc6","modified":1697544862717},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"ebaec2ae044ada08825d8e8af9614821f779d3dd","modified":1697544862717},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"2c1f1edfeaebaafe4265d58e0b8110e71673da40","modified":1697544862718},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"ef6152e1f8ebe1c34214aa1a13cf40238a29dc6c","modified":1697544862716},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"c4358de4ea1372ea68ff5dc0f4257c348d516990","modified":1697544862718},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"90502fc2f5b0a5681a6c6588a9ed6ad297e32890","modified":1697544862717},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"45ccc4cdbd0fe912dd1038484ea8c8394d14adcb","modified":1697615534004},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"2b77ff6cbc8571cab27c3bdc4ad51a79510bbca2","modified":1697544862718},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"795435cc84c46a18e4ac597435a81f66eb86b0c4","modified":1697544862719},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"c5c858742b29e6364da2e1d098e7d6cd8cef038f","modified":1697544862722},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"5636df1f2b6a8d02986d866e3824ec60430046e6","modified":1697544862719},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6cf37f844f150af4bbe212610da61e5140317de9","modified":1697544862719},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"732fcd909f6dac557629206dc7e93a7083cda084","modified":1697544862721},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"846d96ff73409b9a8b34f3cab691821096c03e1d","modified":1697544862722},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"224d078ba1f2c33c52d5e867af71c5fe9f1bdf45","modified":1697544862722},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"67a55a4d94cca2db11a2636f1f2c92c208688b14","modified":1697544862722},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"b82d7fb0d1119738a9f9bb747d415e8c99e454ae","modified":1697544862723},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"91fc6aace74c733de1a9e36f78c0edb5d6f9a53d","modified":1697544862723},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"2c1b9ac7666d7d5b9aaf8f33588e10451c4b7841","modified":1697544862723},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"6dcb532d02325d2a9f5fb92831401552a5540aa8","modified":1697544862723},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"bd73be669ddc47e1daab38736d1cecc3f37662e2","modified":1697544862724},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"ebfb11bdd603cd6e4dcf3949cc52e38009615c25","modified":1697544862724},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"317d420f5448c7452290e37f0ed8516cb73f4068","modified":1697544862725},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"ff7db098608ba48752964cc67a51a04965ea927e","modified":1697544862725},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"43b1c29fea51f849ec0bf85a6d91fe0507f01503","modified":1697544862724},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1697544862733},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1697544862733},{"_id":"themes/jacman/source/css/style.styl","hash":"4610c477560086880acc1ba71c3a72e7c89ecdb7","modified":1697544862733},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1697544862734},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1697544862734},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1697544862734},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1697544862734},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1697544862737},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1697544862736},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1697544862738},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1697544862737},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1697544862740},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1697544862741},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1697544862739},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1697544862741},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1697544862744},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1697544862744},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1697544862746},{"_id":"themes/jacman/source/img/author.jpg","hash":"610a2a551230c3b26317270143286817e274b06c","modified":1697546275708},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1697544862746},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1697544862748},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1697544862749},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1697544862749},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1697544862749},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1697544862750},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1697544862750},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1697544862750},{"_id":"themes/jacman/source/img/favicon.ico","hash":"8c39f647f6403ab93cf00b9c431cfd0d1e14006b","modified":1641918294000},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"b9199e97ea8617fabc1f2fb25ba687e994f1ed3d","modified":1697547277469},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1697544862752},{"_id":"themes/jacman/source/img/logo.png","hash":"0c619e41afa029828d30baa111da4473f267fdb3","modified":1697547135319},{"_id":"themes/jacman/source/img/logo.svg","hash":"ced9b1ea1c4ae65d4163ee87fbc4c81719aff3c8","modified":1697546757954},{"_id":"themes/jacman/source/js/gallery.js","hash":"735a714e54f0ac229f292a90df3a1f882904f6c7","modified":1697544862752},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"28ef4346743a60c896a9ae492a544c0854904350","modified":1697544862753},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"5f690e8588c8493eb9406aa68fbf1765aaff9476","modified":1697544862754},{"_id":"themes/jacman/source/js/totop.js","hash":"48648ec9c86e9ab491831e5a029e6f8864934149","modified":1697544862754},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"c01220f0af629f9e23bf125bdc1beef8afc206ef","modified":1697544862719},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"5699c270be7b28c5b2c36f453317ccd42789fd3d","modified":1697544862728},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"5b9f5ee6a2cc8bd557550bbdc1a03d237681114e","modified":1697544862720},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"20349dcde9942885d5eae1c302ef26b1b8484f3f","modified":1697544862720},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"5c4ab6aa4c16fa55a4bc550d5fd0c715c165417a","modified":1697544862720},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"351e771b1b38244560fc52cf60d91263d3d63eef","modified":1697544862720},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"091512e19cfcf5bde2a699b211f99874f26587ad","modified":1697544862721},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fc23ef9b5a412e05436f68ff47146b860d2d4225","modified":1697544862720},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"12b7360326691ebf06bea5d7ee4d54c41f64e2ec","modified":1697544862721},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"2c23f3f47eb768b31d4d86d56255ffb1e8bcf6c9","modified":1697544862729},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"0b7d517e12102a99be82bc1a9104bb6bfd4ca10b","modified":1697544862729},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"3ec423b734639614fbd11ec2c3445d3a03f5231d","modified":1697544862730},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"0bcb684376fcbf4be42d1df5dd02c395760f7ffb","modified":1697544862730},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"75843d727319b1d07ad4b8c2e969036ce0d4f362","modified":1697544862731},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"0300d7d289eceb3933c1eebf38f8d10f425c1128","modified":1697544862731},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"4746783dc7993ac45d8a0e7a9d347bfe137111fe","modified":1697544862730},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1697544862735},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"f1ae52a4f41d4cfdd66cb186b0329af904fead4f","modified":1697544862732},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"3ca7266a44240093143d0c55c74bb6daf579e298","modified":1697544862732},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"1f9d8c513f05790742c17fc125cb6a1ad374065a","modified":1697544862732},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"b48360e757d501027b7dbe093859d03795476930","modified":1697544862732},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1697544862735},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1697544862735},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1697544862736},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1697544862736},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1697544862736},{"_id":"themes/jacman/source/js/prism/prism.css","hash":"4b2c9ed4633f3955f3c3e874eaf45a6a3e43ed90","modified":1697615401535},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"d280f9ab32d7bf177adb5f7c858444cbfbac651a","modified":1697544862729},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"2aee0cdb80fce512cde66ad229b9e5ee42c0d7b4","modified":1697544862729},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1697544862740},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1697544862743},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"50e0247e9d39756843b7e4f720503b37bfb6154b","modified":1697544862745},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"cd981db035ec1b6f502fca78fd394c5bd438aba1","modified":1697544862753},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1697544862742},{"_id":"themes/jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1697544862748},{"_id":"themes/jacman/source/js/prism/prism.js","hash":"f96b2389619827342c1b87d7150f5c2be0da0f48","modified":1697615400486},{"_id":"public/about.html","hash":"fe51caa8b0e046603c482449cb03060ef858a0a2","modified":1697641125846},{"_id":"public/2019/10/07/2.前端笔记/ES6的第一天/index.html","hash":"4c08519467e8f87a04f9f2b195be6743dd4c6b25","modified":1697641125846},{"_id":"public/archives/index.html","hash":"75e9039e8d81e3d143fe516d6d4686ec8c532e80","modified":1697641125846},{"_id":"public/archives/2019/index.html","hash":"0526d0f77f24dda9dae0a1099ada212a78963e43","modified":1697641125846},{"_id":"public/archives/2019/01/index.html","hash":"8e819aec64ec65470fd353be0564dc4e2bf08073","modified":1697641125846},{"_id":"public/archives/2019/10/index.html","hash":"57ac3b511ada2e68a11e4ab6eaacc17ea7da7dc4","modified":1697641125846},{"_id":"public/categories/设计原则/index.html","hash":"54069c19d53e409d9cf9917bad0be7bcf0cdbd73","modified":1697641125846},{"_id":"public/categories/前端笔记/index.html","hash":"cb9fd9bec2d32dadb61bee328575df6c0316e22d","modified":1697641125846},{"_id":"public/index.html","hash":"b28c5a5f1a9239c833659d43dd4dcee841e0a473","modified":1697641125846},{"_id":"public/tags/计算机编程/index.html","hash":"0989b3e56801706be4b18be641c09f2822779239","modified":1697641125846},{"_id":"public/tags/设计原则/index.html","hash":"70f6f486fc64e5586acfae9499faf0c810c0abcc","modified":1697641125846},{"_id":"public/tags/面向对象/index.html","hash":"31cbfb0e4f62c85ef65f075118d1d58335d3c398","modified":1697641125846},{"_id":"public/tags/Node-js/index.html","hash":"408acb6be128e9d3391fe9ab1b1b48455ca5d771","modified":1697641125846},{"_id":"public/tags/前端笔记/index.html","hash":"c6180e3f564e5f3e0a2f75b03855f6a2bad48150","modified":1697641125846},{"_id":"public/tags/ES6/index.html","hash":"487aa870a2a3ae1a3e598657af75549cc85ec263","modified":1697641125846},{"_id":"public/2019/10/20/1.计算机编程/SOLID原则/index.html","hash":"4bc2c3e9b00218d6ab9503bee2f8f0a8c7f36d73","modified":1697641125846},{"_id":"public/2019/01/08/2.前端笔记/Node.js 、npm、cnpm、yran主要作用/index.html","hash":"6492867f7935611f57089ab26d00967344331816","modified":1697641125846},{"_id":"public/2019/01/07/1.计算机编程/运行时、运行库、运行环境/index.html","hash":"9b79d54bf401abeead6de29214d91b3ccdc9da90","modified":1697641125846},{"_id":"public/2019/01/07/2.前端笔记/Node.js安装与配置环境(Windows版)/index.html","hash":"f589a60d6038d062ee923d33298f94b3e16f4ee7","modified":1697641125846},{"_id":"public/Img/20231016195905.png","hash":"eabb2e7a2b75a4f049dd4c9cb170655743f7312c","modified":1697641125846},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1697641125846},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1697641125846},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1697641125846},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1697641125846},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1697641125846},{"_id":"public/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1697641125846},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1697641125846},{"_id":"public/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1697641125846},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1697641125846},{"_id":"public/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1697641125846},{"_id":"public/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1697641125846},{"_id":"public/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1697641125846},{"_id":"public/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1697641125846},{"_id":"public/img/author.jpg","hash":"610a2a551230c3b26317270143286817e274b06c","modified":1697641125846},{"_id":"public/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1697641125846},{"_id":"public/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1697641125846},{"_id":"public/img/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1697641125846},{"_id":"public/img/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1697641125846},{"_id":"public/img/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1697641125846},{"_id":"public/img/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1697641125846},{"_id":"public/img/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1697641125846},{"_id":"public/img/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1697641125846},{"_id":"public/img/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1697641125846},{"_id":"public/img/favicon.ico","hash":"8c39f647f6403ab93cf00b9c431cfd0d1e14006b","modified":1697641125846},{"_id":"public/img/jacman.jpg","hash":"b9199e97ea8617fabc1f2fb25ba687e994f1ed3d","modified":1697641125846},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1697641125846},{"_id":"public/img/logo.svg","hash":"ced9b1ea1c4ae65d4163ee87fbc4c81719aff3c8","modified":1697641125846},{"_id":"public/img/logo.png","hash":"0c619e41afa029828d30baa111da4473f267fdb3","modified":1697641125846},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1697641125846},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1697641125846},{"_id":"public/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1697641125846},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1697641125846},{"_id":"public/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1697641125846},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1697641125846},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1697641125846},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1697641125846},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1697641125846},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1697641125846},{"_id":"public/js/prism/prism.css","hash":"4b2c9ed4633f3955f3c3e874eaf45a6a3e43ed90","modified":1697641125846},{"_id":"public/css/style.css","hash":"f2bf2bbd0ccf25d34b3de18511ca466e88a011b3","modified":1697641125846},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1697641125846},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1697641125846},{"_id":"public/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1697641125846},{"_id":"public/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1697641125846},{"_id":"public/font/coveredbyyourgrace-webfont.svg","hash":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1697641125846},{"_id":"public/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1697641125846},{"_id":"public/font/fontdiao.svg","hash":"50e0247e9d39756843b7e4f720503b37bfb6154b","modified":1697641125846},{"_id":"public/js/prism/prism.js","hash":"f96b2389619827342c1b87d7150f5c2be0da0f48","modified":1697641125846},{"_id":"public/font/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1697641125846},{"_id":"public/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1697641125846}],"Category":[{"name":"设计原则","_id":"clnvvp0gq0005kcgl2n4u3dc8"},{"name":"前端笔记","_id":"clnvvp0gs000akcgl3h9f8ch3"}],"Data":[],"Page":[{"_content":"# 关于我\n欢迎来到我的编程笔记博客！这里是致力于分享编程知识、经验和技巧、以及记录我的学习旅程。","source":"about.md","raw":"# 关于我\n欢迎来到我的编程笔记博客！这里是致力于分享编程知识、经验和技巧、以及记录我的学习旅程。","date":"2023-10-18T04:48:31.426Z","updated":"2023-10-18T04:48:31.426Z","path":"about.html","title":"","comments":1,"layout":"page","_id":"clnvvp0gg0000kcgl3ltk38e9","content":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>欢迎来到我的编程笔记博客！这里是致力于分享编程知识、经验和技巧、以及记录我的学习旅程。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p>欢迎来到我的编程笔记博客！这里是致力于分享编程知识、经验和技巧、以及记录我的学习旅程。</p>\n"}],"Post":[{"title":"运行时、运行库、运行环境","date":"2019-01-07T05:11:33.000Z","_content":"\n## 运行时（Runtime）\n\n运行时(RunTime) **运行时是指程序在实际执行阶段的时间段**，也就是程序在计算机上运行时的环境和状态。\n它包括了程序的生命周期、内存分配和释放、指令执行、异常处理、多线程管理等。**主要是关注的是程序的执行状态**\n\n---\n## 运行库 (Runtime Library)\n\n运行库是一种或一组库或者函数集合，用于支持编程语言的运行时功能。\n运行库包含了一些通用的函数，类和工具、库等。\n\n---\n\n## 运行时环境 (Runtime Environment)\n\n运行时环境是指程序实际执行阶段的环境和状态。如编程语言的支持，不同编程语言需要特定的运行时环境来执行、例如C#需要.NET Framework或.NET Core 。\n","source":"_posts/1.计算机编程/运行时、运行库、运行环境.md","raw":"---\ntitle: 运行时、运行库、运行环境\ndate: 2019-01-07 13:11:33\ntags: 计算机编程\n---\n\n## 运行时（Runtime）\n\n运行时(RunTime) **运行时是指程序在实际执行阶段的时间段**，也就是程序在计算机上运行时的环境和状态。\n它包括了程序的生命周期、内存分配和释放、指令执行、异常处理、多线程管理等。**主要是关注的是程序的执行状态**\n\n---\n## 运行库 (Runtime Library)\n\n运行库是一种或一组库或者函数集合，用于支持编程语言的运行时功能。\n运行库包含了一些通用的函数，类和工具、库等。\n\n---\n\n## 运行时环境 (Runtime Environment)\n\n运行时环境是指程序实际执行阶段的环境和状态。如编程语言的支持，不同编程语言需要特定的运行时环境来执行、例如C#需要.NET Framework或.NET Core 。\n","slug":"1.计算机编程/运行时、运行库、运行环境","published":1,"updated":"2023-10-17T13:16:11.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnvvp0gk0001kcglgsl899rc","content":"<h2 id=\"运行时（Runtime）\"><a href=\"#运行时（Runtime）\" class=\"headerlink\" title=\"运行时（Runtime）\"></a>运行时（Runtime）</h2><p>运行时(RunTime) <strong>运行时是指程序在实际执行阶段的时间段</strong>，也就是程序在计算机上运行时的环境和状态。<br>它包括了程序的生命周期、内存分配和释放、指令执行、异常处理、多线程管理等。<strong>主要是关注的是程序的执行状态</strong></p>\n<hr>\n<h2 id=\"运行库-Runtime-Library\"><a href=\"#运行库-Runtime-Library\" class=\"headerlink\" title=\"运行库 (Runtime Library)\"></a>运行库 (Runtime Library)</h2><p>运行库是一种或一组库或者函数集合，用于支持编程语言的运行时功能。<br>运行库包含了一些通用的函数，类和工具、库等。</p>\n<hr>\n<h2 id=\"运行时环境-Runtime-Environment\"><a href=\"#运行时环境-Runtime-Environment\" class=\"headerlink\" title=\"运行时环境 (Runtime Environment)\"></a>运行时环境 (Runtime Environment)</h2><p>运行时环境是指程序实际执行阶段的环境和状态。如编程语言的支持，不同编程语言需要特定的运行时环境来执行、例如C#需要.NET Framework或.NET Core 。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"运行时（Runtime）\"><a href=\"#运行时（Runtime）\" class=\"headerlink\" title=\"运行时（Runtime）\"></a>运行时（Runtime）</h2><p>运行时(RunTime) <strong>运行时是指程序在实际执行阶段的时间段</strong>，也就是程序在计算机上运行时的环境和状态。<br>它包括了程序的生命周期、内存分配和释放、指令执行、异常处理、多线程管理等。<strong>主要是关注的是程序的执行状态</strong></p>\n<hr>\n<h2 id=\"运行库-Runtime-Library\"><a href=\"#运行库-Runtime-Library\" class=\"headerlink\" title=\"运行库 (Runtime Library)\"></a>运行库 (Runtime Library)</h2><p>运行库是一种或一组库或者函数集合，用于支持编程语言的运行时功能。<br>运行库包含了一些通用的函数，类和工具、库等。</p>\n<hr>\n<h2 id=\"运行时环境-Runtime-Environment\"><a href=\"#运行时环境-Runtime-Environment\" class=\"headerlink\" title=\"运行时环境 (Runtime Environment)\"></a>运行时环境 (Runtime Environment)</h2><p>运行时环境是指程序实际执行阶段的环境和状态。如编程语言的支持，不同编程语言需要特定的运行时环境来执行、例如C#需要.NET Framework或.NET Core 。</p>\n"},{"title":"SOLID原则","date":"2019-10-20T01:00:36.000Z","_content":"# SOLID原则\n## 什么是SOLID\n\n首先SOLOD原则就是一组面向对象编程的设计原则，主要作用是改善软件设计、提高代码质量，增加软件的可维护性和可扩展性。\n\nSOLID相应代表：\n- **S 单一职责原则(Single Responsibility Principle)**\n- **O 开放封闭原则(Open/Closed Principle)**\n- **L 里氏替换原则(Liskov Substiution Principle)**\n- **O 接口隔离原则(Interface Segregation Principle)**\n- **D 依赖反转原则(Dependencey Inversion Principle)**\n\n## 单一职责原则\n单一职责原则主要介绍一个类的责任应该是单一的，它应该只有一个理由去来改变，类里的方法或属性应该与责任有关。每个类都有清晰的目标和职责。\n\n>简单来说让一个程序员去打代码，还要让设计海报，工作变得复杂，容易出错。那么我们要根据单一职责，以确保每项任务得到专业的处理，打代码的就是来代码，设计海报的就来设计海报。\n也可以理解为游戏中的法师、战士、辅助。他们都有特定的任务职责。\n\n### 违反单一职责的示例\n\n{% codeblock lang:C# %}\n/// <summary>\n/// 文件处理类\n/// </summary>\npublic class FileProcessor\n{\n    public string ReadFile(string filePath)\n    {\n        // 读取文件的具体实现\n    }\n\n    public int CountCharacters(string text)\n    {\n        // 统计字符数的具体实现\n    }\n}\n\n{% endcodeblock %}\n\n### 遵循单一职责的示例\n\n\n{% codeblock lang:C# %}\n \npublic class FileReader\n{\n    public string ReadFile(string filePath)\n    {\n        // 读取文件的具体实现\n    }\n}\n\npublic class CharacterCounter\n{\n    public int CountCharacters(string text)\n    {\n        // 统计字符数的具体实现\n    }\n}\n\n{% endcodeblock %}\n## 开放封闭原则\n开放封闭原则主要强调软件实体、类、模块、函数应该对扩展开放，对修改封闭。这意味着添加新的功能或者更改现有功能时，不应该修改已经存在的代码，而是应该通关扩展现有代码来实现。\n\n> 一旦写好一段代码，就不要再去修改他，相反如果添加新的功能，不要动原来的代码，而是在基础之上添加新的东西。如果在修改原来的代码可能会导致原来的功能变的不稳定。通过新的东西，可以确保旧的功能保持不变。\n\n### 违反开放封闭原则的示例\n\n一个图形绘制应用程序，后面添加新需求要求添加一个新的形状。\n{% codeblock lang:C# %}\npublic class Rectangle\n{\n    public double Width { get; set; }\n    public double Height { get; set; }\n}\n\npublic class AreaCalculator\n{\n    public double CalculateArea(object shape)\n    {\n        if (shape is Rectangle)\n        {\n            var rectangle = (Rectangle)shape;\n            return rectangle.Width * rectangle.Height;\n        }\n        // 现在需要添加一个新的形状（例如圆形）的计算，就需要修改这个类。\n        // 这违反了开放封闭原则。\n        else if (shape is Circle)\n        {\n            var circle = (Circle)shape;\n            return Math.PI * Math.Pow(circle.Radius, 2);\n        }\n        return 0;\n    }\n}\n\n{% endcodeblock %}\n\n### 遵循开放封闭原则的示例\n以下代码我们抽象类一个Shape类，定义了一个抽象方法，并有两个子类，每个类负责实现自己的计算面积方法。\n\n{% codeblock lang:C# %}\npublic abstroct class Shape\n{\n  public abstract double CalculateArea();\n\n}\n\npublic class Rectangle : Shape\n{\n    public double Width { get; set; }\n    public double Height { get; set; }\n\n    public override double CalculateArea()\n    {\n        return Width * Height;\n    }\n}\n\npublic class Circle : Shape\n{\n    public double Radius { get; set; }\n\n    public override double CalculateArea()\n    {\n        return Math.PI * Math.Pow(Radius, 2);\n    }\n}\n{% endcodeblock %}\n## 里氏替换原则\n里氏替换原则强调在面向对象中，子类应该能够替换其基类而不引起不一致或错误。如果一个类型是基类，那么它的子类应该可以无缝地替代它。\n- 子类必须保持基类的行为\n- 子类可以扩展基类的功能\n- 子类不应该引入新的错误\n- 子类不应该强制基类行为\n### 违背里氏替换原则的示例：\n假设我们有一个基类 Bird 表示鸟类，它有一个 Fly 方法用于飞翔。\n{% codeblock lang:C# %}\npublic class Bird\n{\n    public void Fly()\n    {\n        Console.WriteLine(\"这只鸟在飞翔\");\n    }\n}\n\n{% endcodeblock %}\n然后，我们创建了一个子类 Penguin 表示企鹅。企鹅是一种鸟，但它不会飞翔。\n{% codeblock lang:C# %}\npublic class Penguin : Bird\n{\n    // 企鹅不能飞，但我们仍然继承了父类的 Fly 方法，这违背了里氏替换原则。\n}\n{% endcodeblock %}\n\n### 遵守里氏替换原则的示例：\n为了遵守里氏替换原则，我们创建一个接口 IFlyable 表示可以飞翔的行为，然后只有能够飞翔的鸟类实现这个接口。\n\n{% codeblock lang:C# %}\npublic interface IFlyable\n{\n    void Fly();\n}\n\npublic class Bird : IFlyable\n{\n    public void Fly()\n    {\n        Console.WriteLine(\"这只鸟在飞翔\");\n    }\n}\n\npublic class Eagle : IFlyable\n{\n    public void Fly()\n    {\n        Console.WriteLine(\"这只鹰在飞翔\");\n    }\n}\n{% endcodeblock %}\n\n## 接口分离原则 \n接口分离原则强调一个类不应该强制实现它用不到的接口。\n- 接口应该小，不应该包含过多的方法\n- 类应该只实现与关系密切的接口，避免实现不相关方法\n- 如果一个接口变得很庞大，应该拆分成小接口\n### 违背接口分离的示例\n{% codeblock lang:C# %}\n\npublic interface IMultiFunctionDevice\n{\n    void Print();\n    void Scan();\n    void Copy();\n}\n//打印机不需要扫描和复印\npublic class AllInOnePrinter : IMultiFunctionDevice\n{\n    public void Print()\n    {\n        // 打印操作\n    }\n\n    public void Scan()\n    {\n        // 不需要扫描，但还是要实现\n    }\n\n    public void Copy()\n    {\n        // 不需要复印，但还是要实现\n    }\n}\n{% endcodeblock %}\n### 遵循接口分离的示例\nAllInOnePrinter 类只需要实现 IPrinter 接口，而不需要实现不相关的方法。\n{% codeblock lang:C# %}\n\nppublic interface IPrinter\n{\n    void Print();\n}\n\npublic interface IScanner\n{\n    void Scan();\n}\n\npublic interface ICopier\n{\n    void Copy();\n}\n\npublic class AllInOnePrinter : IPrinter\n{\n    public void Print()\n    {\n        // 打印操作\n    }\n}\n\n{% endcodeblock %}\n\n\n## 依赖反转原则\n依赖反转主要强调高层模块**不要直接**依赖底层模块，二者都需要依赖于抽象，具体细节不应该依赖抽象，而抽象应该依赖于具体细节。\n- 高层模块不应该直接依赖底层模块，他们直接要依赖于抽象。\n- 抽象不依赖于具体，具体应该依赖于抽象\n如抽象层，(接口或者抽象类)，以定义高层模块和底层模块之间的通信接口。高层模块依赖于抽象，而具体的底层模块实现这些抽象。\n### 违背依赖反转的示例\nDriver类直接依赖于具体的车型，DriveElectricCar和DriveGasolineCar方法分别依赖于ElectricCar和GasolineCar。这违反了依赖反转，因为高层模块（Driver）直接依赖于低层模块（ElectricCar和GasolineCar）。\n{% codeblock lang:C# %}\npublic class ElectricCar\n{\n    public void Drive()\n    {\n        // 电动车行驶逻辑\n    }\n}\n\npublic class GasolineCar\n{\n    public void Drive()\n    {\n        // 内燃机车行驶逻辑\n    }\n}\n\npublic class Driver\n{\n    public void DriveElectricCar(ElectricCar car)\n    {\n        car.Drive();\n    }\n\n    public void DriveGasolineCar(GasolineCar car)\n    {\n        car.Drive();\n    }\n}\n{% endcodeblock %}\n### 遵守依赖反转的示例\n\n{% codeblock lang:C# %}\npublic interface ICar\n{\n    void Drive();\n}\n引入一个抽象的Car接口，然后让具体的车型实现它。Driver类不再依赖于具体的车型，而是依赖于抽象的Car接口：\npublic class ElectricCar : ICar\n{\n    public void Drive()\n    {\n        // 电动车行驶逻辑\n    }\n}\n\npublic class GasolineCar : ICar\n{\n    public void Drive()\n    {\n        // 内燃机车行驶逻辑\n    }\n}\n\npublic class Driver\n{\n    public void DriveCar(ICar car)\n    {\n        car.Drive();\n    }\n}\n{% endcodeblock %}","source":"_posts/1.计算机编程/SOLID原则.md","raw":"---\ntitle: SOLID原则\ndate: 2019-10-20 09:00:36\ncategories: 设计原则\ntags: \n- 设计原则\n- 面向对象\n---\n# SOLID原则\n## 什么是SOLID\n\n首先SOLOD原则就是一组面向对象编程的设计原则，主要作用是改善软件设计、提高代码质量，增加软件的可维护性和可扩展性。\n\nSOLID相应代表：\n- **S 单一职责原则(Single Responsibility Principle)**\n- **O 开放封闭原则(Open/Closed Principle)**\n- **L 里氏替换原则(Liskov Substiution Principle)**\n- **O 接口隔离原则(Interface Segregation Principle)**\n- **D 依赖反转原则(Dependencey Inversion Principle)**\n\n## 单一职责原则\n单一职责原则主要介绍一个类的责任应该是单一的，它应该只有一个理由去来改变，类里的方法或属性应该与责任有关。每个类都有清晰的目标和职责。\n\n>简单来说让一个程序员去打代码，还要让设计海报，工作变得复杂，容易出错。那么我们要根据单一职责，以确保每项任务得到专业的处理，打代码的就是来代码，设计海报的就来设计海报。\n也可以理解为游戏中的法师、战士、辅助。他们都有特定的任务职责。\n\n### 违反单一职责的示例\n\n{% codeblock lang:C# %}\n/// <summary>\n/// 文件处理类\n/// </summary>\npublic class FileProcessor\n{\n    public string ReadFile(string filePath)\n    {\n        // 读取文件的具体实现\n    }\n\n    public int CountCharacters(string text)\n    {\n        // 统计字符数的具体实现\n    }\n}\n\n{% endcodeblock %}\n\n### 遵循单一职责的示例\n\n\n{% codeblock lang:C# %}\n \npublic class FileReader\n{\n    public string ReadFile(string filePath)\n    {\n        // 读取文件的具体实现\n    }\n}\n\npublic class CharacterCounter\n{\n    public int CountCharacters(string text)\n    {\n        // 统计字符数的具体实现\n    }\n}\n\n{% endcodeblock %}\n## 开放封闭原则\n开放封闭原则主要强调软件实体、类、模块、函数应该对扩展开放，对修改封闭。这意味着添加新的功能或者更改现有功能时，不应该修改已经存在的代码，而是应该通关扩展现有代码来实现。\n\n> 一旦写好一段代码，就不要再去修改他，相反如果添加新的功能，不要动原来的代码，而是在基础之上添加新的东西。如果在修改原来的代码可能会导致原来的功能变的不稳定。通过新的东西，可以确保旧的功能保持不变。\n\n### 违反开放封闭原则的示例\n\n一个图形绘制应用程序，后面添加新需求要求添加一个新的形状。\n{% codeblock lang:C# %}\npublic class Rectangle\n{\n    public double Width { get; set; }\n    public double Height { get; set; }\n}\n\npublic class AreaCalculator\n{\n    public double CalculateArea(object shape)\n    {\n        if (shape is Rectangle)\n        {\n            var rectangle = (Rectangle)shape;\n            return rectangle.Width * rectangle.Height;\n        }\n        // 现在需要添加一个新的形状（例如圆形）的计算，就需要修改这个类。\n        // 这违反了开放封闭原则。\n        else if (shape is Circle)\n        {\n            var circle = (Circle)shape;\n            return Math.PI * Math.Pow(circle.Radius, 2);\n        }\n        return 0;\n    }\n}\n\n{% endcodeblock %}\n\n### 遵循开放封闭原则的示例\n以下代码我们抽象类一个Shape类，定义了一个抽象方法，并有两个子类，每个类负责实现自己的计算面积方法。\n\n{% codeblock lang:C# %}\npublic abstroct class Shape\n{\n  public abstract double CalculateArea();\n\n}\n\npublic class Rectangle : Shape\n{\n    public double Width { get; set; }\n    public double Height { get; set; }\n\n    public override double CalculateArea()\n    {\n        return Width * Height;\n    }\n}\n\npublic class Circle : Shape\n{\n    public double Radius { get; set; }\n\n    public override double CalculateArea()\n    {\n        return Math.PI * Math.Pow(Radius, 2);\n    }\n}\n{% endcodeblock %}\n## 里氏替换原则\n里氏替换原则强调在面向对象中，子类应该能够替换其基类而不引起不一致或错误。如果一个类型是基类，那么它的子类应该可以无缝地替代它。\n- 子类必须保持基类的行为\n- 子类可以扩展基类的功能\n- 子类不应该引入新的错误\n- 子类不应该强制基类行为\n### 违背里氏替换原则的示例：\n假设我们有一个基类 Bird 表示鸟类，它有一个 Fly 方法用于飞翔。\n{% codeblock lang:C# %}\npublic class Bird\n{\n    public void Fly()\n    {\n        Console.WriteLine(\"这只鸟在飞翔\");\n    }\n}\n\n{% endcodeblock %}\n然后，我们创建了一个子类 Penguin 表示企鹅。企鹅是一种鸟，但它不会飞翔。\n{% codeblock lang:C# %}\npublic class Penguin : Bird\n{\n    // 企鹅不能飞，但我们仍然继承了父类的 Fly 方法，这违背了里氏替换原则。\n}\n{% endcodeblock %}\n\n### 遵守里氏替换原则的示例：\n为了遵守里氏替换原则，我们创建一个接口 IFlyable 表示可以飞翔的行为，然后只有能够飞翔的鸟类实现这个接口。\n\n{% codeblock lang:C# %}\npublic interface IFlyable\n{\n    void Fly();\n}\n\npublic class Bird : IFlyable\n{\n    public void Fly()\n    {\n        Console.WriteLine(\"这只鸟在飞翔\");\n    }\n}\n\npublic class Eagle : IFlyable\n{\n    public void Fly()\n    {\n        Console.WriteLine(\"这只鹰在飞翔\");\n    }\n}\n{% endcodeblock %}\n\n## 接口分离原则 \n接口分离原则强调一个类不应该强制实现它用不到的接口。\n- 接口应该小，不应该包含过多的方法\n- 类应该只实现与关系密切的接口，避免实现不相关方法\n- 如果一个接口变得很庞大，应该拆分成小接口\n### 违背接口分离的示例\n{% codeblock lang:C# %}\n\npublic interface IMultiFunctionDevice\n{\n    void Print();\n    void Scan();\n    void Copy();\n}\n//打印机不需要扫描和复印\npublic class AllInOnePrinter : IMultiFunctionDevice\n{\n    public void Print()\n    {\n        // 打印操作\n    }\n\n    public void Scan()\n    {\n        // 不需要扫描，但还是要实现\n    }\n\n    public void Copy()\n    {\n        // 不需要复印，但还是要实现\n    }\n}\n{% endcodeblock %}\n### 遵循接口分离的示例\nAllInOnePrinter 类只需要实现 IPrinter 接口，而不需要实现不相关的方法。\n{% codeblock lang:C# %}\n\nppublic interface IPrinter\n{\n    void Print();\n}\n\npublic interface IScanner\n{\n    void Scan();\n}\n\npublic interface ICopier\n{\n    void Copy();\n}\n\npublic class AllInOnePrinter : IPrinter\n{\n    public void Print()\n    {\n        // 打印操作\n    }\n}\n\n{% endcodeblock %}\n\n\n## 依赖反转原则\n依赖反转主要强调高层模块**不要直接**依赖底层模块，二者都需要依赖于抽象，具体细节不应该依赖抽象，而抽象应该依赖于具体细节。\n- 高层模块不应该直接依赖底层模块，他们直接要依赖于抽象。\n- 抽象不依赖于具体，具体应该依赖于抽象\n如抽象层，(接口或者抽象类)，以定义高层模块和底层模块之间的通信接口。高层模块依赖于抽象，而具体的底层模块实现这些抽象。\n### 违背依赖反转的示例\nDriver类直接依赖于具体的车型，DriveElectricCar和DriveGasolineCar方法分别依赖于ElectricCar和GasolineCar。这违反了依赖反转，因为高层模块（Driver）直接依赖于低层模块（ElectricCar和GasolineCar）。\n{% codeblock lang:C# %}\npublic class ElectricCar\n{\n    public void Drive()\n    {\n        // 电动车行驶逻辑\n    }\n}\n\npublic class GasolineCar\n{\n    public void Drive()\n    {\n        // 内燃机车行驶逻辑\n    }\n}\n\npublic class Driver\n{\n    public void DriveElectricCar(ElectricCar car)\n    {\n        car.Drive();\n    }\n\n    public void DriveGasolineCar(GasolineCar car)\n    {\n        car.Drive();\n    }\n}\n{% endcodeblock %}\n### 遵守依赖反转的示例\n\n{% codeblock lang:C# %}\npublic interface ICar\n{\n    void Drive();\n}\n引入一个抽象的Car接口，然后让具体的车型实现它。Driver类不再依赖于具体的车型，而是依赖于抽象的Car接口：\npublic class ElectricCar : ICar\n{\n    public void Drive()\n    {\n        // 电动车行驶逻辑\n    }\n}\n\npublic class GasolineCar : ICar\n{\n    public void Drive()\n    {\n        // 内燃机车行驶逻辑\n    }\n}\n\npublic class Driver\n{\n    public void DriveCar(ICar car)\n    {\n        car.Drive();\n    }\n}\n{% endcodeblock %}","slug":"1.计算机编程/SOLID原则","published":1,"updated":"2023-10-18T09:41:16.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnvvp0gm0002kcgl8ncj7ror","content":"<h1 id=\"SOLID原则\"><a href=\"#SOLID原则\" class=\"headerlink\" title=\"SOLID原则\"></a>SOLID原则</h1><h2 id=\"什么是SOLID\"><a href=\"#什么是SOLID\" class=\"headerlink\" title=\"什么是SOLID\"></a>什么是SOLID</h2><p>首先SOLOD原则就是一组面向对象编程的设计原则，主要作用是改善软件设计、提高代码质量，增加软件的可维护性和可扩展性。</p>\n<p>SOLID相应代表：</p>\n<ul>\n<li><strong>S 单一职责原则(Single Responsibility Principle)</strong></li>\n<li><strong>O 开放封闭原则(Open&#x2F;Closed Principle)</strong></li>\n<li><strong>L 里氏替换原则(Liskov Substiution Principle)</strong></li>\n<li><strong>O 接口隔离原则(Interface Segregation Principle)</strong></li>\n<li><strong>D 依赖反转原则(Dependencey Inversion Principle)</strong></li>\n</ul>\n<h2 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h2><p>单一职责原则主要介绍一个类的责任应该是单一的，它应该只有一个理由去来改变，类里的方法或属性应该与责任有关。每个类都有清晰的目标和职责。</p>\n<blockquote>\n<p>简单来说让一个程序员去打代码，还要让设计海报，工作变得复杂，容易出错。那么我们要根据单一职责，以确保每项任务得到专业的处理，打代码的就是来代码，设计海报的就来设计海报。<br>也可以理解为游戏中的法师、战士、辅助。他们都有特定的任务职责。</p>\n</blockquote>\n<h3 id=\"违反单一职责的示例\"><a href=\"#违反单一职责的示例\" class=\"headerlink\" title=\"违反单一职责的示例\"></a>违反单一职责的示例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 文件处理类</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FileProcessor</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">ReadFile</span>(<span class=\"params\"><span class=\"built_in\">string</span> filePath</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 读取文件的具体实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">CountCharacters</span>(<span class=\"params\"><span class=\"built_in\">string</span> text</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 统计字符数的具体实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遵循单一职责的示例\"><a href=\"#遵循单一职责的示例\" class=\"headerlink\" title=\"遵循单一职责的示例\"></a>遵循单一职责的示例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FileReader</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">ReadFile</span>(<span class=\"params\"><span class=\"built_in\">string</span> filePath</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 读取文件的具体实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CharacterCounter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">CountCharacters</span>(<span class=\"params\"><span class=\"built_in\">string</span> text</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 统计字符数的具体实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"开放封闭原则\"><a href=\"#开放封闭原则\" class=\"headerlink\" title=\"开放封闭原则\"></a>开放封闭原则</h2><p>开放封闭原则主要强调软件实体、类、模块、函数应该对扩展开放，对修改封闭。这意味着添加新的功能或者更改现有功能时，不应该修改已经存在的代码，而是应该通关扩展现有代码来实现。</p>\n<blockquote>\n<p>一旦写好一段代码，就不要再去修改他，相反如果添加新的功能，不要动原来的代码，而是在基础之上添加新的东西。如果在修改原来的代码可能会导致原来的功能变的不稳定。通过新的东西，可以确保旧的功能保持不变。</p>\n</blockquote>\n<h3 id=\"违反开放封闭原则的示例\"><a href=\"#违反开放封闭原则的示例\" class=\"headerlink\" title=\"违反开放封闭原则的示例\"></a>违反开放封闭原则的示例</h3><p>一个图形绘制应用程序，后面添加新需求要求添加一个新的形状。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">double</span> Width &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">double</span> Height &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AreaCalculator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">double</span> <span class=\"title\">CalculateArea</span>(<span class=\"params\"><span class=\"built_in\">object</span> shape</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shape <span class=\"keyword\">is</span> Rectangle)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> rectangle = (Rectangle)shape;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rectangle.Width * rectangle.Height;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 现在需要添加一个新的形状（例如圆形）的计算，就需要修改这个类。</span></span><br><span class=\"line\">        <span class=\"comment\">// 这违反了开放封闭原则。</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (shape <span class=\"keyword\">is</span> Circle)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> circle = (Circle)shape;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Math.PI * Math.Pow(circle.Radius, <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遵循开放封闭原则的示例\"><a href=\"#遵循开放封闭原则的示例\" class=\"headerlink\" title=\"遵循开放封闭原则的示例\"></a>遵循开放封闭原则的示例</h3><p>以下代码我们抽象类一个Shape类，定义了一个抽象方法，并有两个子类，每个类负责实现自己的计算面积方法。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> abstroct <span class=\"keyword\">class</span> <span class=\"title\">Shape</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"built_in\">double</span> <span class=\"title\">CalculateArea</span>()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> : <span class=\"title\">Shape</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">double</span> Width &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">double</span> Height &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">double</span> <span class=\"title\">CalculateArea</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Width * Height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Circle</span> : <span class=\"title\">Shape</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">double</span> Radius &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">double</span> <span class=\"title\">CalculateArea</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.PI * Math.Pow(Radius, <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h2><p>里氏替换原则强调在面向对象中，子类应该能够替换其基类而不引起不一致或错误。如果一个类型是基类，那么它的子类应该可以无缝地替代它。</p>\n<ul>\n<li>子类必须保持基类的行为</li>\n<li>子类可以扩展基类的功能</li>\n<li>子类不应该引入新的错误</li>\n<li>子类不应该强制基类行为</li>\n</ul>\n<h3 id=\"违背里氏替换原则的示例：\"><a href=\"#违背里氏替换原则的示例：\" class=\"headerlink\" title=\"违背里氏替换原则的示例：\"></a>违背里氏替换原则的示例：</h3><p>假设我们有一个基类 Bird 表示鸟类，它有一个 Fly 方法用于飞翔。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Bird</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fly</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;这只鸟在飞翔&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后，我们创建了一个子类 Penguin 表示企鹅。企鹅是一种鸟，但它不会飞翔。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Penguin</span> : <span class=\"title\">Bird</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 企鹅不能飞，但我们仍然继承了父类的 Fly 方法，这违背了里氏替换原则。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遵守里氏替换原则的示例：\"><a href=\"#遵守里氏替换原则的示例：\" class=\"headerlink\" title=\"遵守里氏替换原则的示例：\"></a>遵守里氏替换原则的示例：</h3><p>为了遵守里氏替换原则，我们创建一个接口 IFlyable 表示可以飞翔的行为，然后只有能够飞翔的鸟类实现这个接口。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IFlyable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Fly</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Bird</span> : <span class=\"title\">IFlyable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fly</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;这只鸟在飞翔&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Eagle</span> : <span class=\"title\">IFlyable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fly</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;这只鹰在飞翔&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"接口分离原则\"><a href=\"#接口分离原则\" class=\"headerlink\" title=\"接口分离原则\"></a>接口分离原则</h2><p>接口分离原则强调一个类不应该强制实现它用不到的接口。</p>\n<ul>\n<li>接口应该小，不应该包含过多的方法</li>\n<li>类应该只实现与关系密切的接口，避免实现不相关方法</li>\n<li>如果一个接口变得很庞大，应该拆分成小接口</li>\n</ul>\n<h3 id=\"违背接口分离的示例\"><a href=\"#违背接口分离的示例\" class=\"headerlink\" title=\"违背接口分离的示例\"></a>违背接口分离的示例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IMultiFunctionDevice</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print</span>()</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Scan</span>()</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Copy</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//打印机不需要扫描和复印</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AllInOnePrinter</span> : <span class=\"title\">IMultiFunctionDevice</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Print</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 打印操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Scan</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不需要扫描，但还是要实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Copy</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不需要复印，但还是要实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"遵循接口分离的示例\"><a href=\"#遵循接口分离的示例\" class=\"headerlink\" title=\"遵循接口分离的示例\"></a>遵循接口分离的示例</h3><p>AllInOnePrinter 类只需要实现 IPrinter 接口，而不需要实现不相关的方法。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ppublic <span class=\"keyword\">interface</span> <span class=\"title\">IPrinter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IScanner</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Scan</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICopier</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Copy</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AllInOnePrinter</span> : <span class=\"title\">IPrinter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Print</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 打印操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"依赖反转原则\"><a href=\"#依赖反转原则\" class=\"headerlink\" title=\"依赖反转原则\"></a>依赖反转原则</h2><p>依赖反转主要强调高层模块<strong>不要直接</strong>依赖底层模块，二者都需要依赖于抽象，具体细节不应该依赖抽象，而抽象应该依赖于具体细节。</p>\n<ul>\n<li>高层模块不应该直接依赖底层模块，他们直接要依赖于抽象。</li>\n<li>抽象不依赖于具体，具体应该依赖于抽象<br>如抽象层，(接口或者抽象类)，以定义高层模块和底层模块之间的通信接口。高层模块依赖于抽象，而具体的底层模块实现这些抽象。</li>\n</ul>\n<h3 id=\"违背依赖反转的示例\"><a href=\"#违背依赖反转的示例\" class=\"headerlink\" title=\"违背依赖反转的示例\"></a>违背依赖反转的示例</h3><p>Driver类直接依赖于具体的车型，DriveElectricCar和DriveGasolineCar方法分别依赖于ElectricCar和GasolineCar。这违反了依赖反转，因为高层模块（Driver）直接依赖于低层模块（ElectricCar和GasolineCar）。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ElectricCar</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drive</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 电动车行驶逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">GasolineCar</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drive</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 内燃机车行驶逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Driver</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DriveElectricCar</span>(<span class=\"params\">ElectricCar car</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        car.Drive();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DriveGasolineCar</span>(<span class=\"params\">GasolineCar car</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        car.Drive();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"遵守依赖反转的示例\"><a href=\"#遵守依赖反转的示例\" class=\"headerlink\" title=\"遵守依赖反转的示例\"></a>遵守依赖反转的示例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICar</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Drive</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">引入一个抽象的Car接口，然后让具体的车型实现它。Driver类不再依赖于具体的车型，而是依赖于抽象的Car接口：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ElectricCar</span> : <span class=\"title\">ICar</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drive</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 电动车行驶逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">GasolineCar</span> : <span class=\"title\">ICar</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drive</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 内燃机车行驶逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Driver</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DriveCar</span>(<span class=\"params\">ICar car</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        car.Drive();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SOLID原则\"><a href=\"#SOLID原则\" class=\"headerlink\" title=\"SOLID原则\"></a>SOLID原则</h1><h2 id=\"什么是SOLID\"><a href=\"#什么是SOLID\" class=\"headerlink\" title=\"什么是SOLID\"></a>什么是SOLID</h2><p>首先SOLOD原则就是一组面向对象编程的设计原则，主要作用是改善软件设计、提高代码质量，增加软件的可维护性和可扩展性。</p>\n<p>SOLID相应代表：</p>\n<ul>\n<li><strong>S 单一职责原则(Single Responsibility Principle)</strong></li>\n<li><strong>O 开放封闭原则(Open&#x2F;Closed Principle)</strong></li>\n<li><strong>L 里氏替换原则(Liskov Substiution Principle)</strong></li>\n<li><strong>O 接口隔离原则(Interface Segregation Principle)</strong></li>\n<li><strong>D 依赖反转原则(Dependencey Inversion Principle)</strong></li>\n</ul>\n<h2 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h2><p>单一职责原则主要介绍一个类的责任应该是单一的，它应该只有一个理由去来改变，类里的方法或属性应该与责任有关。每个类都有清晰的目标和职责。</p>\n<blockquote>\n<p>简单来说让一个程序员去打代码，还要让设计海报，工作变得复杂，容易出错。那么我们要根据单一职责，以确保每项任务得到专业的处理，打代码的就是来代码，设计海报的就来设计海报。<br>也可以理解为游戏中的法师、战士、辅助。他们都有特定的任务职责。</p>\n</blockquote>\n<h3 id=\"违反单一职责的示例\"><a href=\"#违反单一职责的示例\" class=\"headerlink\" title=\"违反单一职责的示例\"></a>违反单一职责的示例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 文件处理类</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FileProcessor</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">ReadFile</span>(<span class=\"params\"><span class=\"built_in\">string</span> filePath</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 读取文件的具体实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">CountCharacters</span>(<span class=\"params\"><span class=\"built_in\">string</span> text</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 统计字符数的具体实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遵循单一职责的示例\"><a href=\"#遵循单一职责的示例\" class=\"headerlink\" title=\"遵循单一职责的示例\"></a>遵循单一职责的示例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FileReader</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">ReadFile</span>(<span class=\"params\"><span class=\"built_in\">string</span> filePath</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 读取文件的具体实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CharacterCounter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">CountCharacters</span>(<span class=\"params\"><span class=\"built_in\">string</span> text</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 统计字符数的具体实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"开放封闭原则\"><a href=\"#开放封闭原则\" class=\"headerlink\" title=\"开放封闭原则\"></a>开放封闭原则</h2><p>开放封闭原则主要强调软件实体、类、模块、函数应该对扩展开放，对修改封闭。这意味着添加新的功能或者更改现有功能时，不应该修改已经存在的代码，而是应该通关扩展现有代码来实现。</p>\n<blockquote>\n<p>一旦写好一段代码，就不要再去修改他，相反如果添加新的功能，不要动原来的代码，而是在基础之上添加新的东西。如果在修改原来的代码可能会导致原来的功能变的不稳定。通过新的东西，可以确保旧的功能保持不变。</p>\n</blockquote>\n<h3 id=\"违反开放封闭原则的示例\"><a href=\"#违反开放封闭原则的示例\" class=\"headerlink\" title=\"违反开放封闭原则的示例\"></a>违反开放封闭原则的示例</h3><p>一个图形绘制应用程序，后面添加新需求要求添加一个新的形状。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">double</span> Width &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">double</span> Height &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AreaCalculator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">double</span> <span class=\"title\">CalculateArea</span>(<span class=\"params\"><span class=\"built_in\">object</span> shape</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shape <span class=\"keyword\">is</span> Rectangle)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> rectangle = (Rectangle)shape;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rectangle.Width * rectangle.Height;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 现在需要添加一个新的形状（例如圆形）的计算，就需要修改这个类。</span></span><br><span class=\"line\">        <span class=\"comment\">// 这违反了开放封闭原则。</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (shape <span class=\"keyword\">is</span> Circle)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> circle = (Circle)shape;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Math.PI * Math.Pow(circle.Radius, <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遵循开放封闭原则的示例\"><a href=\"#遵循开放封闭原则的示例\" class=\"headerlink\" title=\"遵循开放封闭原则的示例\"></a>遵循开放封闭原则的示例</h3><p>以下代码我们抽象类一个Shape类，定义了一个抽象方法，并有两个子类，每个类负责实现自己的计算面积方法。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> abstroct <span class=\"keyword\">class</span> <span class=\"title\">Shape</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"built_in\">double</span> <span class=\"title\">CalculateArea</span>()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> : <span class=\"title\">Shape</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">double</span> Width &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">double</span> Height &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">double</span> <span class=\"title\">CalculateArea</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Width * Height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Circle</span> : <span class=\"title\">Shape</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">double</span> Radius &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">double</span> <span class=\"title\">CalculateArea</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.PI * Math.Pow(Radius, <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h2><p>里氏替换原则强调在面向对象中，子类应该能够替换其基类而不引起不一致或错误。如果一个类型是基类，那么它的子类应该可以无缝地替代它。</p>\n<ul>\n<li>子类必须保持基类的行为</li>\n<li>子类可以扩展基类的功能</li>\n<li>子类不应该引入新的错误</li>\n<li>子类不应该强制基类行为</li>\n</ul>\n<h3 id=\"违背里氏替换原则的示例：\"><a href=\"#违背里氏替换原则的示例：\" class=\"headerlink\" title=\"违背里氏替换原则的示例：\"></a>违背里氏替换原则的示例：</h3><p>假设我们有一个基类 Bird 表示鸟类，它有一个 Fly 方法用于飞翔。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Bird</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fly</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;这只鸟在飞翔&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后，我们创建了一个子类 Penguin 表示企鹅。企鹅是一种鸟，但它不会飞翔。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Penguin</span> : <span class=\"title\">Bird</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 企鹅不能飞，但我们仍然继承了父类的 Fly 方法，这违背了里氏替换原则。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遵守里氏替换原则的示例：\"><a href=\"#遵守里氏替换原则的示例：\" class=\"headerlink\" title=\"遵守里氏替换原则的示例：\"></a>遵守里氏替换原则的示例：</h3><p>为了遵守里氏替换原则，我们创建一个接口 IFlyable 表示可以飞翔的行为，然后只有能够飞翔的鸟类实现这个接口。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IFlyable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Fly</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Bird</span> : <span class=\"title\">IFlyable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fly</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;这只鸟在飞翔&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Eagle</span> : <span class=\"title\">IFlyable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fly</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;这只鹰在飞翔&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"接口分离原则\"><a href=\"#接口分离原则\" class=\"headerlink\" title=\"接口分离原则\"></a>接口分离原则</h2><p>接口分离原则强调一个类不应该强制实现它用不到的接口。</p>\n<ul>\n<li>接口应该小，不应该包含过多的方法</li>\n<li>类应该只实现与关系密切的接口，避免实现不相关方法</li>\n<li>如果一个接口变得很庞大，应该拆分成小接口</li>\n</ul>\n<h3 id=\"违背接口分离的示例\"><a href=\"#违背接口分离的示例\" class=\"headerlink\" title=\"违背接口分离的示例\"></a>违背接口分离的示例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IMultiFunctionDevice</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print</span>()</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Scan</span>()</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Copy</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//打印机不需要扫描和复印</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AllInOnePrinter</span> : <span class=\"title\">IMultiFunctionDevice</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Print</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 打印操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Scan</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不需要扫描，但还是要实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Copy</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不需要复印，但还是要实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"遵循接口分离的示例\"><a href=\"#遵循接口分离的示例\" class=\"headerlink\" title=\"遵循接口分离的示例\"></a>遵循接口分离的示例</h3><p>AllInOnePrinter 类只需要实现 IPrinter 接口，而不需要实现不相关的方法。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ppublic <span class=\"keyword\">interface</span> <span class=\"title\">IPrinter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Print</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IScanner</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Scan</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICopier</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Copy</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AllInOnePrinter</span> : <span class=\"title\">IPrinter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Print</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 打印操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"依赖反转原则\"><a href=\"#依赖反转原则\" class=\"headerlink\" title=\"依赖反转原则\"></a>依赖反转原则</h2><p>依赖反转主要强调高层模块<strong>不要直接</strong>依赖底层模块，二者都需要依赖于抽象，具体细节不应该依赖抽象，而抽象应该依赖于具体细节。</p>\n<ul>\n<li>高层模块不应该直接依赖底层模块，他们直接要依赖于抽象。</li>\n<li>抽象不依赖于具体，具体应该依赖于抽象<br>如抽象层，(接口或者抽象类)，以定义高层模块和底层模块之间的通信接口。高层模块依赖于抽象，而具体的底层模块实现这些抽象。</li>\n</ul>\n<h3 id=\"违背依赖反转的示例\"><a href=\"#违背依赖反转的示例\" class=\"headerlink\" title=\"违背依赖反转的示例\"></a>违背依赖反转的示例</h3><p>Driver类直接依赖于具体的车型，DriveElectricCar和DriveGasolineCar方法分别依赖于ElectricCar和GasolineCar。这违反了依赖反转，因为高层模块（Driver）直接依赖于低层模块（ElectricCar和GasolineCar）。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ElectricCar</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drive</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 电动车行驶逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">GasolineCar</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drive</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 内燃机车行驶逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Driver</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DriveElectricCar</span>(<span class=\"params\">ElectricCar car</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        car.Drive();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DriveGasolineCar</span>(<span class=\"params\">GasolineCar car</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        car.Drive();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"遵守依赖反转的示例\"><a href=\"#遵守依赖反转的示例\" class=\"headerlink\" title=\"遵守依赖反转的示例\"></a>遵守依赖反转的示例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICar</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Drive</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">引入一个抽象的Car接口，然后让具体的车型实现它。Driver类不再依赖于具体的车型，而是依赖于抽象的Car接口：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ElectricCar</span> : <span class=\"title\">ICar</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drive</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 电动车行驶逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">GasolineCar</span> : <span class=\"title\">ICar</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drive</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 内燃机车行驶逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Driver</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DriveCar</span>(<span class=\"params\">ICar car</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        car.Drive();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Node.js 、npm、cnpm、yran主要作用","date":"2019-01-08T10:31:32.000Z","_content":"\n## Node.js\n\nNode.js是运行javaScript代码的运行时的环境平台([什么是运行时？](../1.计算机编程/运行时、运行库、运行环境.md))，通常用于服务器端开发，构建命令行工具和其他类型的应用程序。 可以开发服务器端应用，与文件系统、网络、数据库等进行交互。Node.js使用一个事件驱动、非阻塞式I/O的模式。\n\n>**什么是非阻塞式I/O**：I/O表示Input/Output，它用于表示计算机系统与外部世界（例如磁盘驱动器、网络、键盘、显示器等）之间的数据传输，用于与外部环境进行交互和数据处理。\n>- 在阻塞 I/O 模型中，当程序执行一个 I/O 操作（如读取文件、网络请求等）时，它会等待操作完成后才能继续执行后续代码。\n>- 非阻塞式 I/O 模型的优势在于它可以提高程序的并发性能，使程序能够有效地处理大量的并发请求，而不会因等待 I/O 操作而停滞。这对于网络服务器、数据库访问、文件系统操作等需要处理多个并发请求的应用程序非常有用。\n----\n\n## npm(Node Package Manager)\n\nnpm 是Node.js的官方包管理器，用于安装、管理和共享javascript包。使用npm来安装第三方库，将项目所需的依赖添加到package.json文件中，轻松管理项目的依赖关系。npm提供了命令行工具，运行脚本。\n\n----\n\n## Yarn\n Yarn 也是一个包管理器，类似于 npm，但由 Facebook 开发。它旨在解决一些 npm 的性能和安全性问题。Yarn 提供了更快的安装过程、锁定依赖版本的能力以及其他改进。开发者可以选择使用 npm 或 Yarn，具体取决于他们的偏好。\n\n----\n\n ## cnpm(China npm)\n\n一个由淘宝团队开发的 npm 镜像工具。cnpm 的主要目的是为中国的开发者提供更快速、稳定的 npm 资源下载，因为访问 npm 的官方服务器可能会有一些网络限制或速度较慢.","source":"_posts/2.前端笔记/Node.js 、npm、cnpm、yran主要作用.md","raw":"---\ntitle: Node.js 、npm、cnpm、yran主要作用\ndate: 2019-01-08 18:31:32\ncategories: 前端笔记\ntags: \n- Node.js\n---\n\n## Node.js\n\nNode.js是运行javaScript代码的运行时的环境平台([什么是运行时？](../1.计算机编程/运行时、运行库、运行环境.md))，通常用于服务器端开发，构建命令行工具和其他类型的应用程序。 可以开发服务器端应用，与文件系统、网络、数据库等进行交互。Node.js使用一个事件驱动、非阻塞式I/O的模式。\n\n>**什么是非阻塞式I/O**：I/O表示Input/Output，它用于表示计算机系统与外部世界（例如磁盘驱动器、网络、键盘、显示器等）之间的数据传输，用于与外部环境进行交互和数据处理。\n>- 在阻塞 I/O 模型中，当程序执行一个 I/O 操作（如读取文件、网络请求等）时，它会等待操作完成后才能继续执行后续代码。\n>- 非阻塞式 I/O 模型的优势在于它可以提高程序的并发性能，使程序能够有效地处理大量的并发请求，而不会因等待 I/O 操作而停滞。这对于网络服务器、数据库访问、文件系统操作等需要处理多个并发请求的应用程序非常有用。\n----\n\n## npm(Node Package Manager)\n\nnpm 是Node.js的官方包管理器，用于安装、管理和共享javascript包。使用npm来安装第三方库，将项目所需的依赖添加到package.json文件中，轻松管理项目的依赖关系。npm提供了命令行工具，运行脚本。\n\n----\n\n## Yarn\n Yarn 也是一个包管理器，类似于 npm，但由 Facebook 开发。它旨在解决一些 npm 的性能和安全性问题。Yarn 提供了更快的安装过程、锁定依赖版本的能力以及其他改进。开发者可以选择使用 npm 或 Yarn，具体取决于他们的偏好。\n\n----\n\n ## cnpm(China npm)\n\n一个由淘宝团队开发的 npm 镜像工具。cnpm 的主要目的是为中国的开发者提供更快速、稳定的 npm 资源下载，因为访问 npm 的官方服务器可能会有一些网络限制或速度较慢.","slug":"2.前端笔记/Node.js 、npm、cnpm、yran主要作用","published":1,"updated":"2023-10-18T04:58:29.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnvvp0go0004kcglfgnw437z","content":"<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><p>Node.js是运行javaScript代码的运行时的环境平台(<a href=\"../1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/%E8%BF%90%E8%A1%8C%E6%97%B6%E3%80%81%E8%BF%90%E8%A1%8C%E5%BA%93%E3%80%81%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83.md\">什么是运行时？</a>)，通常用于服务器端开发，构建命令行工具和其他类型的应用程序。 可以开发服务器端应用，与文件系统、网络、数据库等进行交互。Node.js使用一个事件驱动、非阻塞式I&#x2F;O的模式。</p>\n<blockquote>\n<p><strong>什么是非阻塞式I&#x2F;O</strong>：I&#x2F;O表示Input&#x2F;Output，它用于表示计算机系统与外部世界（例如磁盘驱动器、网络、键盘、显示器等）之间的数据传输，用于与外部环境进行交互和数据处理。</p>\n<ul>\n<li>在阻塞 I&#x2F;O 模型中，当程序执行一个 I&#x2F;O 操作（如读取文件、网络请求等）时，它会等待操作完成后才能继续执行后续代码。</li>\n<li>非阻塞式 I&#x2F;O 模型的优势在于它可以提高程序的并发性能，使程序能够有效地处理大量的并发请求，而不会因等待 I&#x2F;O 操作而停滞。这对于网络服务器、数据库访问、文件系统操作等需要处理多个并发请求的应用程序非常有用。</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"npm-Node-Package-Manager\"><a href=\"#npm-Node-Package-Manager\" class=\"headerlink\" title=\"npm(Node Package Manager)\"></a>npm(Node Package Manager)</h2><p>npm 是Node.js的官方包管理器，用于安装、管理和共享javascript包。使用npm来安装第三方库，将项目所需的依赖添加到package.json文件中，轻松管理项目的依赖关系。npm提供了命令行工具，运行脚本。</p>\n<hr>\n<h2 id=\"Yarn\"><a href=\"#Yarn\" class=\"headerlink\" title=\"Yarn\"></a>Yarn</h2><p> Yarn 也是一个包管理器，类似于 npm，但由 Facebook 开发。它旨在解决一些 npm 的性能和安全性问题。Yarn 提供了更快的安装过程、锁定依赖版本的能力以及其他改进。开发者可以选择使用 npm 或 Yarn，具体取决于他们的偏好。</p>\n<hr>\n<h2 id=\"cnpm-China-npm\"><a href=\"#cnpm-China-npm\" class=\"headerlink\" title=\"cnpm(China npm)\"></a>cnpm(China npm)</h2><p>一个由淘宝团队开发的 npm 镜像工具。cnpm 的主要目的是为中国的开发者提供更快速、稳定的 npm 资源下载，因为访问 npm 的官方服务器可能会有一些网络限制或速度较慢.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><p>Node.js是运行javaScript代码的运行时的环境平台(<a href=\"../1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/%E8%BF%90%E8%A1%8C%E6%97%B6%E3%80%81%E8%BF%90%E8%A1%8C%E5%BA%93%E3%80%81%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83.md\">什么是运行时？</a>)，通常用于服务器端开发，构建命令行工具和其他类型的应用程序。 可以开发服务器端应用，与文件系统、网络、数据库等进行交互。Node.js使用一个事件驱动、非阻塞式I&#x2F;O的模式。</p>\n<blockquote>\n<p><strong>什么是非阻塞式I&#x2F;O</strong>：I&#x2F;O表示Input&#x2F;Output，它用于表示计算机系统与外部世界（例如磁盘驱动器、网络、键盘、显示器等）之间的数据传输，用于与外部环境进行交互和数据处理。</p>\n<ul>\n<li>在阻塞 I&#x2F;O 模型中，当程序执行一个 I&#x2F;O 操作（如读取文件、网络请求等）时，它会等待操作完成后才能继续执行后续代码。</li>\n<li>非阻塞式 I&#x2F;O 模型的优势在于它可以提高程序的并发性能，使程序能够有效地处理大量的并发请求，而不会因等待 I&#x2F;O 操作而停滞。这对于网络服务器、数据库访问、文件系统操作等需要处理多个并发请求的应用程序非常有用。</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"npm-Node-Package-Manager\"><a href=\"#npm-Node-Package-Manager\" class=\"headerlink\" title=\"npm(Node Package Manager)\"></a>npm(Node Package Manager)</h2><p>npm 是Node.js的官方包管理器，用于安装、管理和共享javascript包。使用npm来安装第三方库，将项目所需的依赖添加到package.json文件中，轻松管理项目的依赖关系。npm提供了命令行工具，运行脚本。</p>\n<hr>\n<h2 id=\"Yarn\"><a href=\"#Yarn\" class=\"headerlink\" title=\"Yarn\"></a>Yarn</h2><p> Yarn 也是一个包管理器，类似于 npm，但由 Facebook 开发。它旨在解决一些 npm 的性能和安全性问题。Yarn 提供了更快的安装过程、锁定依赖版本的能力以及其他改进。开发者可以选择使用 npm 或 Yarn，具体取决于他们的偏好。</p>\n<hr>\n<h2 id=\"cnpm-China-npm\"><a href=\"#cnpm-China-npm\" class=\"headerlink\" title=\"cnpm(China npm)\"></a>cnpm(China npm)</h2><p>一个由淘宝团队开发的 npm 镜像工具。cnpm 的主要目的是为中国的开发者提供更快速、稳定的 npm 资源下载，因为访问 npm 的官方服务器可能会有一些网络限制或速度较慢.</p>\n"},{"title":"ES6的第一天","date":"2019-10-07T11:00:00.000Z","_content":"\n## ES6 的背景知识\nES6 (ECMAscript) 简称ES是一种编写脚本编程语言，主要用于网页开发中，这是一个基于对象的脚本语言，Netscape(网景)公司开发，后来成为国际标准。\n- **起源**：1995年创建这门语言，被称为javaScript，为了避免商标问题，被标准化为ECMAScript(ECMA为欧洲制造商协会)。\n- **标准化**：1997年ECMAScript被标准化为ECMA-262，标准定义了一些核心功能，如数据类型、操作费、语法等。\n- **ECMAScript3(ES3)**：1999年发布，定义了一些基础语言特性。\n- **ECMAScript5(ES5)**: 2009年发布，引入严格模式，json支持等。\n- **ECMAScript6(ES6)**：2015年发布，带来重大语言改进，如箭头函数、类、模块系统等。\n\n","source":"_posts/2.前端笔记/ES6的第一天.md","raw":"---\ntitle: ES6的第一天\ndate: 2019-10-07 19:00:00\ncategories: 前端笔记\ntags: \n- 前端笔记\n- ES6\n---\n\n## ES6 的背景知识\nES6 (ECMAscript) 简称ES是一种编写脚本编程语言，主要用于网页开发中，这是一个基于对象的脚本语言，Netscape(网景)公司开发，后来成为国际标准。\n- **起源**：1995年创建这门语言，被称为javaScript，为了避免商标问题，被标准化为ECMAScript(ECMA为欧洲制造商协会)。\n- **标准化**：1997年ECMAScript被标准化为ECMA-262，标准定义了一些核心功能，如数据类型、操作费、语法等。\n- **ECMAScript3(ES3)**：1999年发布，定义了一些基础语言特性。\n- **ECMAScript5(ES5)**: 2009年发布，引入严格模式，json支持等。\n- **ECMAScript6(ES6)**：2015年发布，带来重大语言改进，如箭头函数、类、模块系统等。\n\n","slug":"2.前端笔记/ES6的第一天","published":1,"updated":"2023-10-18T06:51:54.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnvvp0gq0006kcgl2myv8la6","content":"<h2 id=\"ES6-的背景知识\"><a href=\"#ES6-的背景知识\" class=\"headerlink\" title=\"ES6 的背景知识\"></a>ES6 的背景知识</h2><p>ES6 (ECMAscript) 简称ES是一种编写脚本编程语言，主要用于网页开发中，这是一个基于对象的脚本语言，Netscape(网景)公司开发，后来成为国际标准。</p>\n<ul>\n<li><strong>起源</strong>：1995年创建这门语言，被称为javaScript，为了避免商标问题，被标准化为ECMAScript(ECMA为欧洲制造商协会)。</li>\n<li><strong>标准化</strong>：1997年ECMAScript被标准化为ECMA-262，标准定义了一些核心功能，如数据类型、操作费、语法等。</li>\n<li>**ECMAScript3(ES3)**：1999年发布，定义了一些基础语言特性。</li>\n<li><strong>ECMAScript5(ES5)</strong>: 2009年发布，引入严格模式，json支持等。</li>\n<li>**ECMAScript6(ES6)**：2015年发布，带来重大语言改进，如箭头函数、类、模块系统等。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ES6-的背景知识\"><a href=\"#ES6-的背景知识\" class=\"headerlink\" title=\"ES6 的背景知识\"></a>ES6 的背景知识</h2><p>ES6 (ECMAscript) 简称ES是一种编写脚本编程语言，主要用于网页开发中，这是一个基于对象的脚本语言，Netscape(网景)公司开发，后来成为国际标准。</p>\n<ul>\n<li><strong>起源</strong>：1995年创建这门语言，被称为javaScript，为了避免商标问题，被标准化为ECMAScript(ECMA为欧洲制造商协会)。</li>\n<li><strong>标准化</strong>：1997年ECMAScript被标准化为ECMA-262，标准定义了一些核心功能，如数据类型、操作费、语法等。</li>\n<li>**ECMAScript3(ES3)**：1999年发布，定义了一些基础语言特性。</li>\n<li><strong>ECMAScript5(ES5)</strong>: 2009年发布，引入严格模式，json支持等。</li>\n<li>**ECMAScript6(ES6)**：2015年发布，带来重大语言改进，如箭头函数、类、模块系统等。</li>\n</ul>\n"},{"title":"Node.js安装与配置环境(Windows版)","date":"2019-01-07T05:11:33.000Z","_content":"\n# Nodejs安装\n## 下载Node.js\nNode.js 官方网站下载：https://nodejs.org/en/download/\n![下载](/../Img/20231016195905.png)\n## 安装\n双击打开安装下一步下一步即可，我默认的路径是 \n>C:\\Program Files\\nodejs\n\n## 查看版本\n安装成功之后，运行**cmd** \n输入**node -v**和**npm -v**分别查看node和npm的版本。\n# npm安装全局模块的路径和缓存路径\n在node.js的安装目录下新建文件夹分别为：\n> node_global\n> node_cache\n\n创建完成之后在**cmd**中执行命令\n\n```npm config set prefix \"C:\\Program Files\\nodejs\\node_global\"```\n\n```npm config set cache \"C:\\Program Files\\nodejs\\node_cache\"```\n\n**设置完成之后进行环境变量的配置分别为:**\n\n``` “环境变量”>“系统变量”：新建一个变量名为“NODE_PATH”，值为“D:\\Program Files\\nodejs\\node_global\\node_modules”```\n\n``` “环境变量”>“用户变量”：编辑用户变量里的path，相应npm的路径C:\\Users\\用户名\\AppData\\Roaming\\npm```\n\n```“环境变量”>“用户变量”：编辑用户变量里的path，相应npm的路径C:\\Program Files\\nodejs\\node_global```\n\n配置完成之后，测试npm下载即可。\n","source":"_posts/2.前端笔记/Node.js安装与配置环境(Windows版).md","raw":"---\ntitle: Node.js安装与配置环境(Windows版)\ndate: 2019-01-07 13:11:33\ncategories: 前端笔记\ntags: \n- Node.js\n---\n\n# Nodejs安装\n## 下载Node.js\nNode.js 官方网站下载：https://nodejs.org/en/download/\n![下载](/../Img/20231016195905.png)\n## 安装\n双击打开安装下一步下一步即可，我默认的路径是 \n>C:\\Program Files\\nodejs\n\n## 查看版本\n安装成功之后，运行**cmd** \n输入**node -v**和**npm -v**分别查看node和npm的版本。\n# npm安装全局模块的路径和缓存路径\n在node.js的安装目录下新建文件夹分别为：\n> node_global\n> node_cache\n\n创建完成之后在**cmd**中执行命令\n\n```npm config set prefix \"C:\\Program Files\\nodejs\\node_global\"```\n\n```npm config set cache \"C:\\Program Files\\nodejs\\node_cache\"```\n\n**设置完成之后进行环境变量的配置分别为:**\n\n``` “环境变量”>“系统变量”：新建一个变量名为“NODE_PATH”，值为“D:\\Program Files\\nodejs\\node_global\\node_modules”```\n\n``` “环境变量”>“用户变量”：编辑用户变量里的path，相应npm的路径C:\\Users\\用户名\\AppData\\Roaming\\npm```\n\n```“环境变量”>“用户变量”：编辑用户变量里的path，相应npm的路径C:\\Program Files\\nodejs\\node_global```\n\n配置完成之后，测试npm下载即可。\n","slug":"2.前端笔记/Node.js安装与配置环境(Windows版)","published":1,"updated":"2023-10-18T04:56:37.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnvvp0gr0007kcglev6x6ejh","content":"<h1 id=\"Nodejs安装\"><a href=\"#Nodejs安装\" class=\"headerlink\" title=\"Nodejs安装\"></a>Nodejs安装</h1><h2 id=\"下载Node-js\"><a href=\"#下载Node-js\" class=\"headerlink\" title=\"下载Node.js\"></a>下载Node.js</h2><p>Node.js 官方网站下载：<a href=\"https://nodejs.org/en/download/\">https://nodejs.org/en/download/</a><br><img src=\"/../Img/20231016195905.png\" alt=\"下载\"></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>双击打开安装下一步下一步即可，我默认的路径是 </p>\n<blockquote>\n<p>C:\\Program Files\\nodejs</p>\n</blockquote>\n<h2 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h2><p>安装成功之后，运行<strong>cmd</strong><br>输入<strong>node -v</strong>和<strong>npm -v</strong>分别查看node和npm的版本。</p>\n<h1 id=\"npm安装全局模块的路径和缓存路径\"><a href=\"#npm安装全局模块的路径和缓存路径\" class=\"headerlink\" title=\"npm安装全局模块的路径和缓存路径\"></a>npm安装全局模块的路径和缓存路径</h1><p>在node.js的安装目录下新建文件夹分别为：</p>\n<blockquote>\n<p>node_global<br>node_cache</p>\n</blockquote>\n<p>创建完成之后在<strong>cmd</strong>中执行命令</p>\n<p><code>npm config set prefix &quot;C:\\Program Files\\nodejs\\node_global&quot;</code></p>\n<p><code>npm config set cache &quot;C:\\Program Files\\nodejs\\node_cache&quot;</code></p>\n<p><strong>设置完成之后进行环境变量的配置分别为:</strong></p>\n<p><code> “环境变量”&gt;“系统变量”：新建一个变量名为“NODE_PATH”，值为“D:\\Program Files\\nodejs\\node_global\\node_modules”</code></p>\n<p><code> “环境变量”&gt;“用户变量”：编辑用户变量里的path，相应npm的路径C:\\Users\\用户名\\AppData\\Roaming\\npm</code></p>\n<p><code>“环境变量”&gt;“用户变量”：编辑用户变量里的path，相应npm的路径C:\\Program Files\\nodejs\\node_global</code></p>\n<p>配置完成之后，测试npm下载即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Nodejs安装\"><a href=\"#Nodejs安装\" class=\"headerlink\" title=\"Nodejs安装\"></a>Nodejs安装</h1><h2 id=\"下载Node-js\"><a href=\"#下载Node-js\" class=\"headerlink\" title=\"下载Node.js\"></a>下载Node.js</h2><p>Node.js 官方网站下载：<a href=\"https://nodejs.org/en/download/\">https://nodejs.org/en/download/</a><br><img src=\"/../Img/20231016195905.png\" alt=\"下载\"></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>双击打开安装下一步下一步即可，我默认的路径是 </p>\n<blockquote>\n<p>C:\\Program Files\\nodejs</p>\n</blockquote>\n<h2 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h2><p>安装成功之后，运行<strong>cmd</strong><br>输入<strong>node -v</strong>和<strong>npm -v</strong>分别查看node和npm的版本。</p>\n<h1 id=\"npm安装全局模块的路径和缓存路径\"><a href=\"#npm安装全局模块的路径和缓存路径\" class=\"headerlink\" title=\"npm安装全局模块的路径和缓存路径\"></a>npm安装全局模块的路径和缓存路径</h1><p>在node.js的安装目录下新建文件夹分别为：</p>\n<blockquote>\n<p>node_global<br>node_cache</p>\n</blockquote>\n<p>创建完成之后在<strong>cmd</strong>中执行命令</p>\n<p><code>npm config set prefix &quot;C:\\Program Files\\nodejs\\node_global&quot;</code></p>\n<p><code>npm config set cache &quot;C:\\Program Files\\nodejs\\node_cache&quot;</code></p>\n<p><strong>设置完成之后进行环境变量的配置分别为:</strong></p>\n<p><code> “环境变量”&gt;“系统变量”：新建一个变量名为“NODE_PATH”，值为“D:\\Program Files\\nodejs\\node_global\\node_modules”</code></p>\n<p><code> “环境变量”&gt;“用户变量”：编辑用户变量里的path，相应npm的路径C:\\Users\\用户名\\AppData\\Roaming\\npm</code></p>\n<p><code>“环境变量”&gt;“用户变量”：编辑用户变量里的path，相应npm的路径C:\\Program Files\\nodejs\\node_global</code></p>\n<p>配置完成之后，测试npm下载即可。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clnvvp0gm0002kcgl8ncj7ror","category_id":"clnvvp0gq0005kcgl2n4u3dc8","_id":"clnvvp0gs000ckcgl57132cg7"},{"post_id":"clnvvp0go0004kcglfgnw437z","category_id":"clnvvp0gs000akcgl3h9f8ch3","_id":"clnvvp0gt000gkcgl9a2eh7n4"},{"post_id":"clnvvp0gq0006kcgl2myv8la6","category_id":"clnvvp0gs000akcgl3h9f8ch3","_id":"clnvvp0gu000kkcglc6p3acss"},{"post_id":"clnvvp0gr0007kcglev6x6ejh","category_id":"clnvvp0gs000akcgl3h9f8ch3","_id":"clnvvp0gu000nkcglb535d786"}],"PostTag":[{"post_id":"clnvvp0gk0001kcglgsl899rc","tag_id":"clnvvp0go0003kcglh0e6g4r9","_id":"clnvvp0gr0009kcgl5ges4nv8"},{"post_id":"clnvvp0gm0002kcgl8ncj7ror","tag_id":"clnvvp0gr0008kcgldlamck2j","_id":"clnvvp0gt000hkcgl1ecf3tqp"},{"post_id":"clnvvp0gm0002kcgl8ncj7ror","tag_id":"clnvvp0gs000bkcgl3l1m3jjv","_id":"clnvvp0gu000ikcgl2js9c05z"},{"post_id":"clnvvp0go0004kcglfgnw437z","tag_id":"clnvvp0gt000ekcgl26cgcp8f","_id":"clnvvp0gu000lkcglcrvge3zx"},{"post_id":"clnvvp0gq0006kcgl2myv8la6","tag_id":"clnvvp0gu000jkcgl4sby5uuj","_id":"clnvvp0gv000pkcgl4xzc4yvd"},{"post_id":"clnvvp0gq0006kcgl2myv8la6","tag_id":"clnvvp0gu000mkcglafbb2juj","_id":"clnvvp0gv000qkcgl60cqfyb4"},{"post_id":"clnvvp0gr0007kcglev6x6ejh","tag_id":"clnvvp0gt000ekcgl26cgcp8f","_id":"clnvvp0gv000rkcgl17v49wed"}],"Tag":[{"name":"计算机编程","_id":"clnvvp0go0003kcglh0e6g4r9"},{"name":"设计原则","_id":"clnvvp0gr0008kcgldlamck2j"},{"name":"面向对象","_id":"clnvvp0gs000bkcgl3l1m3jjv"},{"name":"Node.js","_id":"clnvvp0gt000ekcgl26cgcp8f"},{"name":"前端笔记","_id":"clnvvp0gu000jkcgl4sby5uuj"},{"name":"ES6","_id":"clnvvp0gu000mkcglafbb2juj"}]}}